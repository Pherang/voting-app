[33m[nodemon] 1.17.3[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching: *.*[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
Cursor {
  pool: null,
  server: null,
  disconnectHandler: 
   Store {
     s: { storedOps: [], storeOptions: [Object], topology: [Server] },
     length: [Getter] },
  bson: BSON {},
  ns: 'votingapp.polls',
  cmd: 
   { find: 'votingapp.polls',
     limit: 0,
     skip: 0,
     query: { _id: '5ae7e01fa2c7ad722fc9ca41' },
     readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     slaveOk: true },
  options: 
   { readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     skip: 0,
     limit: 0,
     raw: undefined,
     hint: null,
     timeout: undefined,
     slaveOk: true,
     db: 
      Db {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] },
     promiseLibrary: [Function: Promise],
     disconnectHandler: Store { s: [Object], length: [Getter] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] } },
  topology: 
   Server {
     _events: 
      { serverOpening: [Function],
        serverDescriptionChanged: [Function],
        serverHeartbeatStarted: [Function],
        serverHeartbeatSucceeded: [Function],
        serverHeartbeatFailed: [Function],
        serverClosed: [Function],
        topologyOpening: [Function],
        topologyClosed: [Function],
        topologyDescriptionChanged: [Function],
        commandStarted: [Function],
        commandSucceeded: [Function],
        commandFailed: [Function],
        joined: [Function],
        left: [Function],
        ping: [Function],
        ha: [Function],
        authenticated: [Function],
        error: [Array],
        timeout: [Array],
        close: [Array],
        parseError: [Array],
        open: [Array],
        fullsetup: [Array],
        all: [Array],
        reconnect: [Array] },
     _eventsCount: 25,
     _maxListeners: Infinity,
     clientInfo: 
      { driver: [Object],
        os: [Object],
        platform: 'Node.js v9.8.0, LE' },
     s: 
      { coreTopology: [Server],
        sCapabilities: [ServerCapabilities],
        clonedOptions: [Object],
        reconnect: true,
        emitError: true,
        poolSize: 5,
        storeOptions: [Object],
        store: [Store],
        host: 'localhost',
        port: 27017,
        options: [Object],
        sessionPool: [ServerSessionPool],
        sessions: [],
        promiseLibrary: [Function: Promise] } },
  cursorState: 
   { cursorId: null,
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     documents: [],
     cursorIndex: 0,
     dead: false,
     killed: false,
     init: false,
     notified: false,
     limit: 0,
     skip: 0,
     batchSize: 1000,
     currentLimit: 0,
     transforms: undefined,
     reconnect: true },
  logger: Logger { className: 'Cursor' },
  _readableState: 
   ReadableState {
     objectMode: true,
     highWaterMark: 16,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s: 
   { numberOfRetries: 5,
     tailableRetryInterval: 500,
     currentNumberOfRetries: 5,
     state: 0,
     streamOptions: {},
     bson: BSON {},
     ns: 'votingapp.polls',
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     options: 
      { readPreference: [ReadPreference],
        skip: 0,
        limit: 0,
        raw: undefined,
        hint: null,
        timeout: undefined,
        slaveOk: true,
        db: [Db],
        promiseLibrary: [Function: Promise],
        disconnectHandler: [Store],
        topology: [Server] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] },
     topologyOptions: 
      { host: 'localhost',
        port: 27017,
        disconnectHandler: [Store],
        cursorFactory: [Function],
        reconnect: true,
        emitError: true,
        size: 5,
        monitorCommands: false,
        socketOptions: {},
        socketTimeout: 360000,
        connectionTimeout: 30000,
        promiseLibrary: [Function: Promise],
        clientInfo: [Object],
        bson: BSON {} },
     promiseLibrary: [Function: Promise],
     currentDoc: null,
     session: undefined },
  sortValue: undefined }
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
Cursor {
  pool: null,
  server: null,
  disconnectHandler: 
   Store {
     s: { storedOps: [], storeOptions: [Object], topology: [Server] },
     length: [Getter] },
  bson: BSON {},
  ns: 'votingapp.polls',
  cmd: 
   { find: 'votingapp.polls',
     limit: 0,
     skip: 0,
     query: { _id: '5ae7e01fa2c7ad722fc9ca41' },
     readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     slaveOk: true },
  options: 
   { readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     skip: 0,
     limit: 0,
     raw: undefined,
     hint: null,
     timeout: undefined,
     slaveOk: true,
     db: 
      Db {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] },
     promiseLibrary: [Function: Promise],
     disconnectHandler: Store { s: [Object], length: [Getter] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] } },
  topology: 
   Server {
     _events: 
      { serverOpening: [Function],
        serverDescriptionChanged: [Function],
        serverHeartbeatStarted: [Function],
        serverHeartbeatSucceeded: [Function],
        serverHeartbeatFailed: [Function],
        serverClosed: [Function],
        topologyOpening: [Function],
        topologyClosed: [Function],
        topologyDescriptionChanged: [Function],
        commandStarted: [Function],
        commandSucceeded: [Function],
        commandFailed: [Function],
        joined: [Function],
        left: [Function],
        ping: [Function],
        ha: [Function],
        authenticated: [Function],
        error: [Array],
        timeout: [Array],
        close: [Array],
        parseError: [Array],
        open: [Array],
        fullsetup: [Array],
        all: [Array],
        reconnect: [Array] },
     _eventsCount: 25,
     _maxListeners: Infinity,
     clientInfo: 
      { driver: [Object],
        os: [Object],
        platform: 'Node.js v9.8.0, LE' },
     s: 
      { coreTopology: [Server],
        sCapabilities: [ServerCapabilities],
        clonedOptions: [Object],
        reconnect: true,
        emitError: true,
        poolSize: 5,
        storeOptions: [Object],
        store: [Store],
        host: 'localhost',
        port: 27017,
        options: [Object],
        sessionPool: [ServerSessionPool],
        sessions: [],
        promiseLibrary: [Function: Promise] } },
  cursorState: 
   { cursorId: null,
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     documents: [],
     cursorIndex: 0,
     dead: false,
     killed: false,
     init: false,
     notified: false,
     limit: 0,
     skip: 0,
     batchSize: 1000,
     currentLimit: 0,
     transforms: undefined,
     reconnect: true },
  logger: Logger { className: 'Cursor' },
  _readableState: 
   ReadableState {
     objectMode: true,
     highWaterMark: 16,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s: 
   { numberOfRetries: 5,
     tailableRetryInterval: 500,
     currentNumberOfRetries: 5,
     state: 0,
     streamOptions: {},
     bson: BSON {},
     ns: 'votingapp.polls',
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     options: 
      { readPreference: [ReadPreference],
        skip: 0,
        limit: 0,
        raw: undefined,
        hint: null,
        timeout: undefined,
        slaveOk: true,
        db: [Db],
        promiseLibrary: [Function: Promise],
        disconnectHandler: [Store],
        topology: [Server] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] },
     topologyOptions: 
      { host: 'localhost',
        port: 27017,
        disconnectHandler: [Store],
        cursorFactory: [Function],
        reconnect: true,
        emitError: true,
        size: 5,
        monitorCommands: false,
        socketOptions: {},
        socketTimeout: 360000,
        connectionTimeout: 30000,
        promiseLibrary: [Function: Promise],
        clientInfo: [Object],
        bson: BSON {} },
     promiseLibrary: [Function: Promise],
     currentDoc: null,
     session: undefined },
  sortValue: undefined }
Cursor {
  pool: null,
  server: null,
  disconnectHandler: 
   Store {
     s: { storedOps: [], storeOptions: [Object], topology: [Server] },
     length: [Getter] },
  bson: BSON {},
  ns: 'votingapp.polls',
  cmd: 
   { find: 'votingapp.polls',
     limit: 0,
     skip: 0,
     query: { _id: '5ae7e01fa2c7ad722fc9ca41' },
     readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     slaveOk: true },
  options: 
   { readPreference: ReadPreference { mode: 'primary', tags: undefined, options: undefined },
     skip: 0,
     limit: 0,
     raw: undefined,
     hint: null,
     timeout: undefined,
     slaveOk: true,
     db: 
      Db {
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] },
     promiseLibrary: [Function: Promise],
     disconnectHandler: Store { s: [Object], length: [Getter] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] } },
  topology: 
   Server {
     _events: 
      { serverOpening: [Function],
        serverDescriptionChanged: [Function],
        serverHeartbeatStarted: [Function],
        serverHeartbeatSucceeded: [Function],
        serverHeartbeatFailed: [Function],
        serverClosed: [Function],
        topologyOpening: [Function],
        topologyClosed: [Function],
        topologyDescriptionChanged: [Function],
        commandStarted: [Function],
        commandSucceeded: [Function],
        commandFailed: [Function],
        joined: [Function],
        left: [Function],
        ping: [Function],
        ha: [Function],
        authenticated: [Function],
        error: [Array],
        timeout: [Array],
        close: [Array],
        parseError: [Array],
        open: [Array],
        fullsetup: [Array],
        all: [Array],
        reconnect: [Array] },
     _eventsCount: 25,
     _maxListeners: Infinity,
     clientInfo: 
      { driver: [Object],
        os: [Object],
        platform: 'Node.js v9.8.0, LE' },
     s: 
      { coreTopology: [Server],
        sCapabilities: [ServerCapabilities],
        clonedOptions: [Object],
        reconnect: true,
        emitError: true,
        poolSize: 5,
        storeOptions: [Object],
        store: [Store],
        host: 'localhost',
        port: 27017,
        options: [Object],
        sessionPool: [ServerSessionPool],
        sessions: [],
        promiseLibrary: [Function: Promise] } },
  cursorState: 
   { cursorId: null,
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     documents: [],
     cursorIndex: 0,
     dead: false,
     killed: false,
     init: false,
     notified: false,
     limit: 0,
     skip: 0,
     batchSize: 1000,
     currentLimit: 0,
     transforms: undefined,
     reconnect: true },
  logger: Logger { className: 'Cursor' },
  _readableState: 
   ReadableState {
     objectMode: true,
     highWaterMark: 16,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: null,
     ended: false,
     endEmitted: false,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: true,
  _events: {},
  _eventsCount: 0,
  _maxListeners: undefined,
  s: 
   { numberOfRetries: 5,
     tailableRetryInterval: 500,
     currentNumberOfRetries: 5,
     state: 0,
     streamOptions: {},
     bson: BSON {},
     ns: 'votingapp.polls',
     cmd: 
      { find: 'votingapp.polls',
        limit: 0,
        skip: 0,
        query: [Object],
        readPreference: [ReadPreference],
        slaveOk: true },
     options: 
      { readPreference: [ReadPreference],
        skip: 0,
        limit: 0,
        raw: undefined,
        hint: null,
        timeout: undefined,
        slaveOk: true,
        db: [Db],
        promiseLibrary: [Function: Promise],
        disconnectHandler: [Store],
        topology: [Server] },
     topology: 
      Server {
        _events: [Object],
        _eventsCount: 25,
        _maxListeners: Infinity,
        clientInfo: [Object],
        s: [Object] },
     topologyOptions: 
      { host: 'localhost',
        port: 27017,
        disconnectHandler: [Store],
        cursorFactory: [Function],
        reconnect: true,
        emitError: true,
        size: 5,
        monitorCommands: false,
        socketOptions: {},
        socketTimeout: 360000,
        connectionTimeout: 30000,
        promiseLibrary: [Function: Promise],
        clientInfo: [Object],
        bson: BSON {} },
     promiseLibrary: [Function: Promise],
     currentDoc: null,
     session: undefined },
  sortValue: undefined }
[32m[nodemon] restarting due to changes...[39m
[32m[nodemon] starting `node index.js`[39m
authsetup imported
Server running on port 4040
Connected to DB server
